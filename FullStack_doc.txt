DATE:22.07.2024
==================================================
FULL STACK DEVELOPER
===============================================
PROJECT
=================================
FRONT END
BACKEND
DATABASE
REAL TIMES TOOLS
==========================================
1.MAVEN
2.GRADEL
3.JUNIT
4.MOCKITO
5.POSTMAN
6.SWAGGER
7.DOCKER
8.KUBERNETES
9.SONARQUBE
10.JIRA
11.JOCCO
12.LOG4J2
=============================================================================
SOFTWARE
================================
JAVA17
IDE
==================
STS===SPRING TOOL SUITE

MYSQL
POSTMAN

FRONT END
=========================
VISUAL CODE STUDIO
=========================================================================
DBMS
===========================================================================
DATABASE MANAGEMENT SYSTEM
========================================================================
DATABASE
==================================================================
DATABASE IS COLLECTION OF INTERELATED TABLES OR DATA
=======================================================
DBMS 
============================
RDBMS
==================================
RELATIONAL DATABASE MANAGEMENT SYSTEM
================================================================================================
DBMS=DATABASE+SQL
SQL===STRUCTURED QUERY LANGUGAE
============================================================

JAVA==3RD GEN===HLL
BOTH HOW  PART AND WHAT PART KNOWN TO  US
SQL===4GL==NON PROCEDURAL LANGUAGE
HERE  HOW PART IS NOT KNOWN TO USE
ONLY WHAT PART IS KNOWN TO US
SELECT * FROM EMP;
COMMANDS OF SQL
===============================================================
1.DDL==DATA DEFINATION LANGUAGE
CREATE,TRUNCATE,DROP,ALTER,RENAME
2.DML
===============================
DATA MANIPULATION LANGUAGE
=================================
INSERT,UPDATE,DELETE,MERGE
DATA  RETRIEVAL
=================================
SELECT
==================================
TCL==TRANSACTION CONTROL LANGUAGE
===============================
COMMIT,ROLLBACK,SAVEPOINT
DCL
==================================
DATA CONTROL LANGUAGE
==================================
GRANT,REVOKE
DBMS RDBMS
========================
CONCEPT
MYSQL,ORACLE,SQLSERVER,POSTGRESQL
===============================================================
ADVANTAGE OF DBMS
================================
1.MINIMIZE DATA REDUNDENCY
2.DATA CAN BE SHARED
3.SECURITY RESTRICTION PROVIDED
4.INTEGRITY CONSTRAINTS MAINTAINED
==================================
DATATYPE OF MYSQL
=============================================
VARCHAR===ALPHANUMERIC===A01
VARCHAR(10)
DECIMAL
NUMBER(5)===99999
NUMBER(7,2)===99999.99
DATE
======================
YYYY-MM-DD
==============================================
CONSTRAINTS
========================================================================
BEFORE INSERTING ANY ROW INTO A TABLE YOU HAVE TO SATISFY CTAIN RULES AND REGULATIONS CALLED CONSTRAINTS
TYPES OF CONSTRAINTS
====================================
1.PRIMARY KEY===IT DOESN'T ACCEPT NULL VALUE AS WELL AS DUPLICATE VALUE
2.UNIQUE KEY===IT DOESN'T ACCEPT NULL VALUE BUT ACCEPT DUPLICATE VALUE
3.NOT NULL=YOU CAN'T LEFT BLANK TO THE FIELD
4.CHECK CONSTRAINTS===IT WILL SUPPORT PREDEFINED VALUES
EX:GENDER==M/F,MARITAL STATUS==Y/N
5.FOREIGN KEY==IT WIIL ACCEPT OTHER TABLE PRIMARY KEY VALUE
===========================================================================
LOGIN MYSQL
====================
1.MYSQL WORKBENCH
2.MYSQL COMMAND LINE CLIENT
3.COMMAND PROMPT

MAVEN IS A BUILD TOOL.
PURPOSE
=========================================
TO AUTOMATE PROJECT BUILDING PROCESS
========================================================
PROJECT BUILDING PROCESS
===============================================
1.DOWNLOAD LIBRARIES/JAR FILES
2.COMPILE THE SOURCE CODE
3.EXECUTE THE TEST CASES
4.PACKAGE THE APPLICATION INTO JAR  FILES OR WAR FILES

SET UP MAVEN
==============================================
1.COMMAND PROMPT
2.IDE===STS,ECLIPSE,INTELLIJ
==========================================================
TERMINOLOGY
===========================================================
ARCHIETYPE====TYPES OF PROJECT ===QUICKSTART,WEB
GROUPID====ORGANISATION NAME===com.aec
ARTIFACTID===NAME OF THE PROJECT
VERSION===SNAPSHOT  RELAEASE
SNAPSHOT===UNDER DEVELOPING
DEPENDENCY====LIBRARIES OR JAR FILES
REPOSITORY===LOCATION WHERE THE JAR FILES ARE STORED
 THREE TYPES
==============================
1.LOCAL===IT IS YOUR HDD
2.CENTRAL====WEB/CLOUD
3.REMOTE====IT IS THE COMPANY'S SERVER
GOAL====PROCESS OF BUILDING THE PROJECT
=================================================
1.CLEAN
2.COMPILE
3.TEST
4.PACKAGE
======================================================
pom.xml
============================================
IT IS CALLED THE HEART OF THE PROJECT
pom===PROJECT OBJECT M ODEL
PURPOSE
===========================
1.DEPENDENCY MANAGEMENT
2.PLUG IN
3.PROJECT MANAGEMENT
4.PACKAGING
TRANSITIVE DEPENDENCY
================================
PRACTICAL
===================================================
CREATE A NEW  MAVEN PROJECT
===ADD  SPRING CONTEXT DEPENDENCY
====CREATE THE JAR FILES

THEN ADD LOMBOK DEPENDENCY
CLEAN IT AND CREATE THE NEW JAR FILES
==========================================================
LOMBOK INSTALLATION
============================================================
C:\Users\arins\.m2\repository\org\projectlombok\lombok
==========================================================
DATE:23.07.2024
================================================================
JDBC
============================================
JAVA DATABASE CONNECTIVITY
WE NEED IMPORT ONE PACKAGE import java.sql.*;
java.sql.*====COLLECTION OF CLASSES AND INTERFACES
java.sql.*
===================================================
LIST OF INTERFACES
===========================
Connection==============TO ESTABLISH THE CONNECTION
Statement===============EXECUTE SQL QUERIES
PreparedStatement=======EXECUTE PRECOMPILED SQL STATEMENT
CallableStatement======EXECUTE STORED PROCEDURE
ResultSet==============RETRIEVE DATA FROM DATABASE AND STORE INTO RESULTSET
ResultSetMetaData======GIVE DETALS INFORMATION OF RESULTSET
DatabaseMetaData======GIVE DETAILS INFORMATION OF DATABASE
============================================================
CLASSES
===================================================
DriverManager====REGISTER AND LOAD THE JDBC DRIVER
Date=============DEALS DATE TYPE DATA
TimeStamp========DEALS WITH BOTH DATE AND TIME
=================================================
EXCEPTION HANDLE HERE
==============================================================
CHECKED EXCEPTION HANDLE HERE
======================================
ClassNotFoundException
SQLException
================================
STEPS OF COMMUNICATION
================================
import java.sql.*=====DONE
REGISTER AND LOAD THE JDBC DRIVER===DONE
ESTABLISH THE CONNECTION====DONE
CREATE THE STATEMENT
EXECUTE THE STATEMENT
RETRIEVE DATA INTO RESULTSET
CLOSE THE CONNECTION AND STATEMENT
================================================================
TYPES OF JDBC DRIVER
===================================
1.JDBC-ODBC BRIDGE====TYPE-I DRIVER
2.NATIVE API-JAVA=====TYPE-II DRIVER
3.JDBC NETWORK-ALL JAVA==TYPE-III DRIVER
4.NATIVE PROTOCOL-ALL JAVA===TYPE-IV DRIVER
======================================================
STEPS
=======================
DATABASE:FULLSTACKDB
TABLE:CUSTOMER
FIELDS    DATATYPE     SIZE     CONSTRAINTS
================================================
CID       VARCHAR       10      PRIMARY KEY
CNAME     VARCHAR       25      NOT NULL
CPHNO     VARCHAR       10      NOT NULL
========================================
   CREATE DATABASE FULLSTACKDB;
   USE FULLSTACKDB;
    CREATE TABLE CUSTOMER
     (CID  VARCHAR(10),
      CNAME VARCHAR(25) NOT NULL,
      CPHNO  VARCHAR(10) NOT NULL,
     CONSTRAINT CUSTOMER_CID_PK PRIMARY KEY(CID)
     );
DESC CUSTOMER;
==============================================
INSERT INTO CUSTOMER VALUES('C1','ANUP','343443');
SELECT * FROM CUSTOMER;
================================================
CRUD OPERATION
=====================
INSERT
UPDATE
DELETE
FETCH
=======================
 class X
{
public int add()
{
   return 
}
}
class Y{
public static void main(String args[])
{
    X x=new X();
    int  res=x.add();

}

}
public Connection getConn()
{
}
==================================================================================
HIBERNATE
===================================================================================
ORM====OBJECT RELATIONAL MAPPING
==============================================================
POJO CLASS
=================================================================
PLAIN OLD JAVA OBJECT
GETTER()
SETTER()
CONSRUCTOR
PARAMETERISED CONSTRUCTOR
toString()
========================================================================
CANDIDATE
=======================
cndid     String   10   PRIMARY KEY
CNDNM    STRING    25   NOT NULL
C1      ARUP
C2      AJOY
ADHAR
==============================
ADHNO    STRING  10  PK
CITY     STRING  25  NOT NULL
343434  KOLKATA
566556  CHENNAI
===================================================================================
DATE:24.07.2024
================================================================================
MAPPING RELATIONSHIP
=================================================================
1.ONE TO ONE MAPPING
2.ONE TO MANY MAPPING
3.MANY TO ONE MAPPING
4.MANY TO MANY MAPPING
==============================================================================
CRUD OPERATION USING HIBERNATE
======================================================
TABLE:STUDENT
ROLLNO====10====VARCHAR======PRIMARY KEY
SNAME=====25=====VARCHAR=====NOT NULL
SDEPT=====25======VARCHAR====NOT NULL
==================================================
FETCH DATA IN HIBERNATE CAN BE DONE BY THREE WAYS
====================================================
1.JPQL===JAVA PERSISTENCE  QUERY LANGUAGE====CLASS NAME
2.HQL====HIBERNATE QUERY LANGUAGE===ENTITY CLASS NAME
3.NATIVE SQL===NORMAL
String hql="from Student where sdept=:v_sdept";
REGISTER
========================================
UNAME   VARCHAR      15   PK
PASS    VARCHAR      10   NOT NULL
NM      VARCHAR      25   NOT NULL
EMAIL   VARCHAR      30   NOT NULL
========================================
arindam123  1234    arindam  a@gmail.com
deep123     test    DEEP     de@gmail.com
arindam123  1234
arindam123  5678
=========================================================
SPRING
====================================================================
TYPES OF APPLICATION
======================================
1.DESKTOP APPLICATION===CORE JAVA,AWT,SWING,HIBERNATE.SPRING   =====.JAR FILE
2.WEB APPLICATION======SERVLET,JSP,HTML,CSS,JAVASCRIPT,SPRING MVC  =====.WAR FILE
3.ENTERPRISE APPLICATION===EJB,SPRING                           =====.EAR(.JAR+.WAR)
======================================================================================
DEFINATION OF SPRING
====================================
SPRING IS AN OPEN SOURCE LIGHT WEIGHT DEPENCY INJECTION BASED FRAMEWORK SOFTWARE
TO DEVELOP JAVA/JEE BASED ENTERPRISE APPLICATION
================================================================================
HEAVY WEIGHT
====================================================
.java====compile===.class===container===.java==.class===o/p
LIGHT WEIGHT
=========================================================
.java===compile===.class==container==.class==O/P
POJO CLASSES
XML FILE/ANNOTATION
FRAMEWORK
=========================================================
CONCEPT    TECHNOLOGIES
DATABASE===JDBC
MAILING ===JAVAMAIL
MESSAGING===JMS/KAFKA
FRAMEWORK==TECHNOLOGIES+DESIGN PATTERN
DESIGN PATTERN 
==============================
WELL APPROVED SOLUTION
============================================================================
FEATURES OF SPRING
=======================================
1.IT SUPPORT CONTAINER SYSTEM
CONTAINER SYSTEM
================================
1.SCAN THE CLASSES
2.CREATE THE OBJECT
3.PROVIDE THE DATA TO THE OBJECT
4.DESTROY THE OBJECT
SPRING CONTAINER
============================
1.BeanFactory
2.ApplicationContext===ALSO CALLED IOC(INVERSION CONTROL)
WHAT IS THE ROLE OF PROGRAMMER
========================================
DEPEN DENCY
================================
INSTANCE VARIABLE IN SPRING BEAN CLASS CALLED DEPENDENCY
DEPENDENCY INJECTION
===================================
PROVIDE/UPDATE DATA INTO DEPENDENCY CALLED DEPENDENCY INJECTION
TYPES OF DEPENDENCY INJECTION
=====================================
1.PRIMITIVE TYPES==INTEGER,DOUBLE,FLOAT
2.COLLECTION TYPES===LIST,SET,MAP,PROPERTIES
3.OBJECT REFERENCE
4.CONSTRUCTOR INJECTION
=========================================
MODULES OF SPRING
=============================
1.SPRING CORE
2.SPRING DAO
3.SPRING CONTEXT
4.SPRING AOP
5.SPRING ORM
6.SPRING WEB MVC
SPRING CORE
===============================
THE RULES AND REGULATION GIVEN BY SPRING
RULES
==========================
1.SPRING BEAN CLASS SHOULD BE PUBLIC
2.GETTER()  & SETTER() METHOD
3.CONSTRUCTOR
4.CONSTRUCTOR WITH PARAMETER
5.toString()
6.EQUALS()
7.HASHCODE()
======================================
SETTER INJECTION
========================================
application.properties
@Value("${eid}")
@Value("${ename}")
colgnm={RAMAN,ROBIN,ALOKE,ROBIN}

	@Value("#{${job}}")
DATE:25.07.2024
===========================================================
LINKING BETWEEN THE OBJECTS IN SPRING CONTAINER BY MEANS OF @Autowired
.
LIMITATION OF SPRING
=================================================================================
1.WE NEED USE LOT OF DEPENDENCIES WITH COMPATABLE VERSION
2.WE HAVE TO CONFIGURE LOT OF THINGS
3.APPLICATON TO BE DEPLOYED IN EXTERNAL SERVER
EX:TOMCAT,JBOSS,WEBLOGIC,WEBSPHERE
SPRING BOOT
=========================================================================================
SPRING BOOT IS AN ARCHIETECTURAL STYLE WHICH IS WORK ON TOP OF THE SPRING
ADVANTAGE
==========================================
1.STARTER DEPENDENCY
===========================================
RELATED JAR FILES OF DIFFERENT GROUP TOGETHER INTO SINGLE UNIT
SPRING BOOT STARTER DEPENDENDENCY
SPRING BOOT STARTER WEB
2.AUTOCONFIGURATION
===========================================================
BY DEFAULT AUTO CONFIGURATION IS DISABLED
@EnableAutoConfiguration
3.EMBEDDED SERVER
PURPOSE
=====================
RAPID APPLICATION DEVELOPMENT
SPRING BOOT PROJECT
=================================
1.MAVEN
2.SPRING INITIALIZER
3.SPRING BOOT STARTER

@SpringBootApplication
=================================================================
@EnableAutoConfiguration
@ComponentSacn
@Configuration
WHY YML IS BETTER
==========================================================================
1.NO INDEX DUPLICATION TOOK PLACE
2.IT IS MORE READABLE THAN PROPERTIES FILES
==========================================================================
SPRING BOOT JDBC 
===========================================================================
TABLE:ACCOUNT
=============================================
FIELDS     DATA TYPE     SIZE         CONSTRAINTS
=====================================================
ACCNO       VARCHAR       10          PRIMARY KEY
CNAME       VARCHAR       25          NOT NULL
BALANCE     DECIMAL
=================================================================

CREATE TABLE ACCOUNT
(ACCNO  VARCHAR(10) PRIMARY KEY,
 CNAME  VARCHAR(25) NOT NULL,
 BALANCE  DECIMAL);
LOMBOK
MYSQL
JDBC API

JdbcTemplate
update()
queryForList()


WEB APPLICATION USING SPRING BOOT
==========================================================
1.LOMBOK
2.SPRING WEB====TOMCAT
3.SPRING DEV TOOLS
localhost:1004/show
SPRING+HIBERNATE USING SPRING BOOT
====================================================================================================================
SPRING DATA JPA
===========================================================================
HERE TWO INTERFACES ARE THERE
CrudRepository<T,ID>=======INTERFACE
JpaRepository<T,ID>=======INTERFACE
T==ENTITY CLASS NAME
ID===PRIMARY KEY DATA TYPE
save()
findAll()
findById()
delete()

JpaRepository<T,ID> extends CrudRepository<T,ID>
save()
findAll()
findById()
delete()
DEPENDENCY
================================
1.LOMBOK
2.SPRING DATA JPA
3.MYSQL
================================================
SERVICE CLASS===============COM.ARINDAM.SERVICE
REPOSITORY INTERFACE========COM.ARINDAM.REPOSITORY
ENTITY CLASS=================COM.ARINDAM.ENTITY
MAIN CLASS
====================================================================
DATE:27.07.2024
====================================================================
RESTFULL WEBSERVICES
====================================================================
WEBSERVICE
================================================
IT IS USED TO COMMUNICATE TWO INTEROPERABLE APPLICATION
===================================================
TYPES OF WEBSERVICES
===============================
TWO TYPES
=============================
1.SOAP===SIMPLE OBJECT ACCESS PROTOCOL====IT WILL ACCEPT ONLY XML DATA
2.REST==REPRESETATIONAL STATE TRANSFER===IT SUPPORT BOTH XML AND JSON
ACTION BASED URL
==========================================
http://www.abc.com/?id=1
                    QUERY PARAMETER
RESOURCE BASED URL
===================================
http://www.abc.com/1
                   PATH PARAMETER OR VARIABLE
======================================================
HTTP METHODS
=====================
1.GET====GET THE DATA FROM SERVER
2.POST===ADD OR POST DATA TO THE SERVER
3.DELETE===DELETE THE DATA TO THE SERVER
4.PUT======UPDATE DATA TO THE SERVER
=========================================================
HTTP STATUS CODE
=========================================================
404==== NOT FOUND
500====INTERNAL SERVERB ERROR
200===OK
===============================================================
JSON==JAVASCRIPT OBJECT NOTATION
{
    "id":101,
    "name":"SUMAN",
    "phno":"455445"

}
REST API TOOL
================================
POSTMAN
SWAGGER===ALSO PERFORM DOCUMENTATION
========================================
RESTCONTROLLER
===========================================
CONTROLLER +RESPONSE BODY
@RestController===OBJECT CREATION AND REST KIND OF WEBSERVICE APPLICATION
FLOW OF RESTAPI APPLICATION
========================================
DEPENDENCY REQUIRED FOR REST API APPLICATION
===============================================
1.MYSQL
2.LOMBOK
3.SPRING DATA JPA
4.SPRING WEB
5.SPRING BOOT DEV TOOLS
========================================================
http://localhost:1004/order/add
{
  "oid":"100",
  "oqty":1,
  "price":500.00
}

public ResponseEntity<List<Order>> getData()
	{
		List<Order> olist=oservice.getData();
		return new ResponseEntity<List<Order>>(olist,HttpStatus.OK);
		
	}


http://localhost:1004/order/fetch/100

@GetMapping("/fetch/{oid}")
	public ResponseEntity<Order> findByOrderId(@PathVariable String oid)
	{
		Order o=oservice.findByOrderId(oid);
		return new ResponseEntity<Order>(o,HttpStatus.OK);
	}

http://localhost:1004/order/del/101
	@DeleteMapping("/del/{oid}")
	public ResponseEntity<String> deleteData(@PathVariable String oid)
	{
		String msg1="DATA DELETED SUCEESFULLY";
		oservice.deleteData(oid);
		return new ResponseEntity<String>(msg1,HttpStatus.OK);
	}

http://localhost:1004/order/upd/100
public Order updateData(String oid,Order ord)
{
    Order o=orepo.findById(oid).orElse(null);
		if(o!=null)
		{
			o.setOid(oid); 
                        o.setOqty(ord.getOqty());
                        o.setPrice(ord.getPrice());
                        orepo.save(o);

		}
               return o;
}
public Order updateData(String oid,Order ord)
	{
		Order o=orepo.findById(oid).orElse(null);
		if(o!=null)
		{
			o.setOid(oid);
			o.setOqty(ord.getOqty());
			o.setPrice(ord.getPrice());
			orepo.save(o);
		}
		return o;
	}


@PutMapping("/upd/{oid}")
	public ResponseEntity<Order> updateData(@PathVariable String oid,@RequestBody Order ord)
	{
		Order o=oservice.updateData(oid, ord);
		return new ResponseEntity<Order>(o,HttpStatus.OK);
	}
=====================================================================
FRONT END DEVELOPMENT
===================================================================
REACT JS
================================
PREREQUISITE
=========================================
HTML
CSS
JAVASCRIPT
=====================================================================
JAVASCRIPT IS A PROGRAMMING LANGUAGE BECAUSE IT CAN COMMUNICATE TO DATABASE AND APPLICATION SERVER.
BEFORE 2010 IT CALLED SCRIPTING LANGUAGE
====================================================================================
PURPOSE
========================================
1.TO DEVELOP DYNAMIC USER INTERFACE
2.CILENT SIDE AND SERVER SIDE VALIDATION
3.COMMUNICATE WITH FROND END AND BACK END APPLICATION
====================================================================
AREAS OF JAVASCRIPT USED
============================
1.WEB APPLICATION
2.MOBILE APPLICATION
3.DESKTOP APPLICATION
4.ML APP
===================================================================
NODE JS===JAVASCRIPT RUNTIME ENVIRONMENT'
IDE==VISUAL STUDIO CODE
=================================================================
VARIABLE IN JAVASCRIPT
==================================
NAMED STORED LOCATION 
TYPES OF VARIBLE
==============================
1.PRIMITIVE TYPE
=====================================
NUMBER,STRING,BOOLEAN,SYMBOL,NULL,UNDEFINED,BYTE
2.NON PRIMITIVE TYPE
=======================================
OBJECT
==============================================================
VARIABLE CAN BE CREATED BY
=============================
VAR,LET,CONST
=================================================
TYPES OF FUNCTION IN JAVASCRIPT
========================================
1.NORMAL FUNCTION
2.PARAMETERISED FUNCTION
3.FUNCTION WITH RETURN VALUE
4.ANNONYMOUS FUNCTION
5.HIGHER ORDER FUNCTION
6.CALLBACK FUNCTION
7.ARROW FUNCTION

//ANNONYMOUS AND CALLBACK FUNCTION
function fn4(f)
{
    console.log(f);
    f();
}
fn4(function(){
    var city='KOLKATA';
    console.log(city);
})
fn5(print);
HIGER  callback function
ORDER
FUNCTION

arr.forEach(function(element,index){
   console.log(index,element); 
})


//MAP FUNCTION RETURN A ARRAY
var newArray1=arr.map(function(element,index){
    return element*10;
})
console.log(newArray1);

var employee={
    eid:101,
    ename:'SUMAN',
    edesig:'MANAGER',
    address:{
        plotno:'AD10',
        streetnm:'SALTLAKE CITY',
        pincode:'700091',
        area:{
            ps:'BIDHANAGAR',
            dist:'24PGS(N)'
        }
    }
}
console.log(employee);
eid ename plotno pincode ps
console.log(employee.eid,employee.ename,employee.address.plotno,employee.address.pincode,
employee.address.area.ps);

ES6
======================
ECMA SCRIPT
=========================================================
1.SPREAD OPERATOR
2.REST PARAMETER
3.LET CONST VAR
4.ARROW FUNCTION
5.FOR EACH LOOP USING ARROW FUNCTION
6.MAP() USING ARROW FUNCTION
7.FILTER() USING ARROW FUNCTION
8.DESTRUCTING THE OBJECT
9.PROMISE OBJECT
=============================================================================
arr.forEach((element,index)=>{
        console.log(index,element); 
    })
=============================================================================
DATE:28.07.2024
============================================================================
DOM
=========================================
DOCUMENT OBJECT MODEL
THE HTML DOCUMENT IS CONVERTED TO OBJECTS CALLED NODES AND IT WILL FORM A TREE LIKE
DATASTRUCTURE CALLED DOM
==================================================================
HTML DOCUMENT=========BROWSER ENGINE====BYTES===TOKENS===NODES
ACCESS THE DOM ELEMENT B Y MEANS OF
=======================================
ID
CLASS
ATTRIBUTE
TAG NAME

REACT JS
====================================================================
REACT IS JAVASCRIPT LIBRARY.
JAVASCRIPT LIBRARY IS COLLECTION OF PREDEFINED CLASSES AND FUNCTIONS
PURPOSE
===================================================
TO DEVELOP DYNAMIC USER INTERFACE
FRONT END ==REACTJS+OTHER LIBRARIES
=========================================================
COMPONENTS IN REACT
======================================
TWO TYPES
==================================
CLASS COMPONENT
FUNCTIONAL COMPONENT
=====================================
REACT.createElement()===REACT ELEMENT
CREATE REACT ELEMENT====ReactDOM===PUSH THE REACT ELEMENT TO THE DOM
====================================================================
JSX==99% TO THE HTML
JSX FILE===BABEL COMPILER===REACT ELEMENT====GIVEN TO ===REACT DOM===PUSHES TO===DOM==RENDERING
JSX CODE TO BE WRITTEN IN FUNCTIONAL COMPONENT
=========================================================
FUNCTIONAL COMPONENT RULES
============================================
IT IS STARTED WITH CAPTIAL LETTER
AND RETURN UI I.E. JSX
CRA TOOL
==============================
CREATE REACT APP TOOL
=================================================
NPM==NODE PACKAGE MANAGER
npm create-react-app reactappdemo===INSTALL CRA TOOL
npx create-react-app  reactappdemo===RUN THE CRA TOOL
====================================================
REACT HOOKS
=====================================================
REACT HOOK IS A SPECIAL FUNCTION USED SPECIFIC PURPOSE
EXAMPLS
=============================
useState==DYNAMIC DATA HANDELLING
========================================================================
Ex:
==============================================
let[state,setState]=useState();
useEffect
useRef
useContext
useCallback
================================================================
let[data,setData]=useState({
                            name:"",
                            gender:"",
                            email:"",
                            description:""
                            });
===============================================================
PROPS
===============================================================
TRANSFER THE DATA FROM ONE COMPONENT TO ANOTHER COMPONENT
===============================================================
DATE:29.07.2024
=================================================================
PROPS DRILLING
===================================================================

CONTEXT API
================================================================
AXIOS
==============================================================
IT IS A EXTERNAL LIBRARY.
WHEN WE COMMUNICATE TO EXTERNAL APPLICATION THEN WE NEED AXIOS LIBRARY
npm install axios

  <tr>
                      <td>{index+1}</td>
                       <td>{element.name.first}</td>
                       <td><img src={element.picture.medium} height={80} width={80}/></td>
                        </tr>


















